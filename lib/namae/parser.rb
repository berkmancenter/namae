#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.2
# from Racc grammar file "".
#

require 'racc/parser.rb'

require 'strscan'

module Namae
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 116)

  @defaults = {
    :debug => false,
    :prefer_comma_as_separator => false,
    :comma => ',',
    :stops => ',;',
    :separator => /\s*(\band\b|\&|;)\s*/i,
    :title => /\s*\b(sir|lord|count(ess)?|(gen|adm|col|maj|capt|cmdr|lt|sgt|cpl|pvt|pastor|pr|reverend|rev|elder|deacon|deaconess|father|fr|rabbi|cantor|vicar|prof|dr|md|ph\.?d)\.?)(\s+|$)/i,
    :suffix => /\s*\b(JR|Jr|jr|SR|Sr|sr|[IVX]{2,})(\.|\b)/,
    :appellation => /\s*\b((mrs?|ms|fr|hr)\.?|miss|herr|frau)(\s+|$)/i,
    :uppercase_particle => /\s*\b((Da|De|Di|De\sLa|Du|Der|Des|Da|St|Saint|Les|Van)\.?)(\s+|$)/
  }

  class << self
    attr_reader :defaults

    def instance
      Thread.current[:namae] ||= new
    end
  end

  attr_reader :options, :input

  def initialize(options = {})
    @options = self.class.defaults.merge(options)
  end

  def debug?
    options[:debug] || ENV['DEBUG']
  end

  def separator
    options[:separator]
  end

  def comma
    options[:comma]
  end

  def stops
    options[:stops]
  end

  def title
    options[:title]
  end

  def suffix
    options[:suffix]
  end

  def appellation
    options[:appellation]
  end

  def uppercase_particle
    options[:uppercase_particle]
  end

  def prefer_comma_as_separator?
    options[:prefer_comma_as_separator]
  end

  def parse(string)
    parse!(string)
  rescue => e
    warn e.message if debug?
    []
  end

  def parse!(string)
    @input = StringScanner.new(normalize(string))
    reset
    do_parse
  end

  def normalize(string)
    string.scrub.strip
  end

  def reset
    @commas, @words, @initials, @suffices, @yydebug = 0, 0, 0, 0, debug?
    self
  end

  private

  def stack
    @vstack || @racc_vstack || []
  end

  def last_token
    stack[-1]
  end

  def consume_separator
    return next_token if seen_separator?
    @commas, @words, @initials, @suffices = 0, 0, 0, 0
    [:AND, :AND]
  end

  def consume_comma
    @commas += 1
    [:COMMA, :COMMA]
  end

  def consume_word(type, word)
    @words += 1

    case type
    when :UWORD
      @initials += 1 if word =~ /^[[:upper:]]+\b/
    when :SUFFIX
      @suffices += 1
    end

    [type, word]
  end

  def seen_separator?
    !stack.empty? && last_token == :AND
  end

  def suffix?
    !@suffices.zero? || will_see_suffix?
  end

  def will_see_suffix?
    input.rest.strip.split(/\s+/)[0] =~ suffix
  end

  def will_see_initial?
    input.rest.strip.split(/\s+/)[0] =~ /^[[:upper:]]+\b/
  end

  def seen_full_name?
    prefer_comma_as_separator? && @words > 1 &&
      (@initials > 0 || !will_see_initial?) && !will_see_suffix?
  end

  def next_token
    case
    when input.nil?, input.eos?
      nil
    when input.scan(separator)
      consume_separator
    when input.scan(/\s*#{comma}\s*/)
      if @commas.zero? && !seen_full_name? || @commas == 1 && suffix?
        consume_comma
      else
        consume_separator
      end
    when input.scan(/\s+/)
      next_token
    when input.scan(title)
      consume_word(:TITLE, input.matched.strip)
    when input.scan(suffix)
      consume_word(:SUFFIX, input.matched.strip)
    when input.scan(appellation)
      if @words.zero?
        [:APPELLATION, input.matched.strip]
      else
        consume_word(:UWORD, input.matched)
      end
    when input.scan(uppercase_particle)
      consume_word(:UPWORD, input.matched.strip)
    when input.scan(/((\\\w+)?\{[^\}]*\})*[[:upper:]][^\s#{stops}]*/)
      consume_word(:UWORD, input.matched)
    when input.scan(/((\\\w+)?\{[^\}]*\})*[[:lower:]][^\s#{stops}]*/)
      consume_word(:LWORD, input.matched)
    when input.scan(/(\\\w+)?\{[^\}]*\}[^\s#{stops}]*/)
      consume_word(:PWORD, input.matched)
    when input.scan(/('[^'\n]+')|("[^"\n]+")/)
      consume_word(:NICK, input.matched[1...-1])
    else
      raise ArgumentError,
        "Failed to parse name #{input.string.inspect}: unmatched data at offset #{input.pos}"
    end
  end

  def on_error(tid, value, stack)
    raise ArgumentError,
      "Failed to parse name: unexpected '#{value}' at #{stack.inspect}"
  end

# -*- racc -*-
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
   -41,    18,    25,    34,   -42,    35,    36,   -41,    19,   -41,
   -41,   -42,    40,   -42,   -42,    15,    13,    16,    46,    52,
     7,    17,    62,    12,    15,    24,    16,    27,    15,    13,
    16,    17,    29,     7,    17,    66,    12,    15,    24,    16,
    27,    73,    60,    59,    61,    29,    74,    46,   -40,   -36,
   -24,    60,    59,    61,    66,   -40,    69,    25,    46,    60,
    59,    61,    60,    59,    61,    17,    46,    46,    46,    46,
    60,    59,    61,    15,    24,    16,    17,    46,    34,    32,
    35,    34,    38,    35,    34,    32,    35,   -21,   -21,   -21,
    34,    49,    35,    34,    32,    35,    34,    38,    35,   -22,
   -22,   -22,    34,    53,    35,    34,    32,    35,    34,    32,
    35,   -21,   -21,   -21,    60,    59,    61,    60,    59,    61,
    66 ]

racc_action_check = [
    15,     1,     8,    39,    16,    39,    11,    15,     1,    15,
    15,    16,    18,    16,    16,     0,     0,     0,    26,    31,
     0,     0,    37,     0,     9,     9,     9,     9,    19,    19,
    19,    44,     9,    19,    19,    45,    19,    22,    22,    22,
    22,    56,    56,    56,    56,    22,    57,    47,    13,    56,
    13,    36,    36,    36,    57,    13,    50,    65,    36,    52,
    52,    52,    62,    62,    62,    67,    52,    68,    71,    62,
    69,    69,    69,     5,     5,     5,    77,    69,    10,    10,
    10,    12,    12,    12,    23,    23,    23,    24,    24,    24,
    27,    27,    27,    28,    28,    28,    29,    29,    29,    32,
    32,    32,    33,    33,    33,    42,    42,    42,    48,    48,
    48,    49,    49,    49,    74,    74,    74,    80,    80,    80,
    79 ]

racc_action_pointer = [
    12,     1,   nil,   nil,   nil,    70,   nil,   nil,    -7,    21,
    75,     4,    78,    48,   nil,     0,     4,   nil,    12,    25,
   nil,   nil,    34,    81,    84,   nil,     8,    87,    90,    93,
   nil,    17,    96,    99,   nil,   nil,    48,    20,   nil,     0,
   nil,   nil,   102,   nil,    22,    25,   nil,    37,   105,   108,
    54,   nil,    56,   nil,   nil,   nil,    39,    44,   nil,   nil,
   nil,   nil,    59,   nil,   nil,    48,   nil,    56,    57,    67,
   nil,    58,   nil,   nil,   111,   nil,   nil,    67,   nil,   110,
   114,   nil ]

racc_action_default = [
    -1,   -51,    -2,    -4,    -5,   -51,    -8,    -9,   -10,   -25,
   -51,   -51,   -51,   -21,   -30,   -32,   -33,   -49,   -51,   -51,
    -6,    -7,   -51,   -51,   -40,   -50,   -43,   -51,   -51,   -51,
   -31,   -16,   -24,   -25,   -32,   -33,   -38,   -51,   -24,   -25,
    82,    -3,   -51,   -16,   -47,   -44,   -45,   -43,   -51,   -24,
   -14,   -15,   -38,   -23,   -17,   -26,   -39,   -28,   -34,   -40,
   -41,   -42,   -38,   -14,   -11,   -48,   -46,   -47,   -43,   -38,
   -19,   -51,   -35,   -37,   -51,   -18,   -12,   -47,   -20,   -27,
   -29,   -13 ]

racc_goto_table = [
     3,     1,    45,    44,    54,    20,    64,    21,    31,    26,
    37,    23,    80,     2,    71,    28,     8,   nil,    30,     3,
    70,    43,    26,    45,    67,    47,    50,    51,    42,    76,
    75,    30,    41,    48,   nil,     8,   nil,    78,     9,    81,
    63,   nil,    30,    22,    45,    77,    68,    79,    30,   nil,
    39,   nil,   nil,   nil,   nil,   nil,    72,     9,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    39,   nil,    39,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    72 ]

racc_goto_check = [
     3,     1,    17,     9,    13,     3,    10,     4,    11,     3,
    11,    12,    15,     2,    16,    12,     7,   nil,    18,     3,
    13,    11,     3,    17,     9,    11,    11,    11,    12,    10,
    13,    18,     2,    12,   nil,     7,   nil,    13,     8,    10,
    11,   nil,    18,     8,    17,     9,    11,    17,    18,   nil,
     8,   nil,   nil,   nil,   nil,   nil,     3,     8,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     8,   nil,     8,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     3 ]

racc_goto_pointer = [
   nil,     1,    13,     0,     2,   nil,   nil,    16,    38,   -23,
   -38,    -2,     6,   -32,   nil,   -62,   -42,   -24,     9 ]

racc_goto_default = [
   nil,   nil,   nil,    58,     4,     5,     6,    65,    33,   nil,
   nil,    11,    10,   nil,    55,    56,   nil,    57,    14 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 13, :_reduce_1,
  1, 13, :_reduce_2,
  3, 13, :_reduce_3,
  1, 14, :_reduce_4,
  1, 14, :_reduce_none,
  2, 14, :_reduce_6,
  2, 14, :_reduce_7,
  1, 14, :_reduce_none,
  1, 17, :_reduce_9,
  1, 17, :_reduce_10,
  4, 16, :_reduce_11,
  5, 16, :_reduce_12,
  6, 16, :_reduce_13,
  3, 16, :_reduce_14,
  3, 16, :_reduce_15,
  2, 16, :_reduce_16,
  3, 18, :_reduce_17,
  4, 18, :_reduce_18,
  4, 18, :_reduce_19,
  5, 18, :_reduce_20,
  1, 24, :_reduce_none,
  2, 24, :_reduce_22,
  3, 24, :_reduce_23,
  1, 23, :_reduce_none,
  1, 23, :_reduce_none,
  1, 25, :_reduce_26,
  3, 25, :_reduce_27,
  1, 25, :_reduce_28,
  3, 25, :_reduce_29,
  1, 20, :_reduce_none,
  2, 20, :_reduce_31,
  1, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 27, :_reduce_none,
  2, 27, :_reduce_35,
  0, 28, :_reduce_none,
  1, 28, :_reduce_none,
  0, 26, :_reduce_none,
  1, 26, :_reduce_none,
  1, 15, :_reduce_none,
  1, 15, :_reduce_none,
  1, 15, :_reduce_none,
  0, 21, :_reduce_none,
  1, 21, :_reduce_none,
  1, 29, :_reduce_none,
  2, 29, :_reduce_46,
  0, 22, :_reduce_none,
  1, 22, :_reduce_none,
  1, 19, :_reduce_none,
  2, 19, :_reduce_50 ]

racc_reduce_n = 51

racc_shift_n = 82

racc_token_table = {
  false => 0,
  :error => 1,
  :COMMA => 2,
  :UWORD => 3,
  :LWORD => 4,
  :PWORD => 5,
  :NICK => 6,
  :AND => 7,
  :APPELLATION => 8,
  :TITLE => 9,
  :SUFFIX => 10,
  :UPWORD => 11 }

racc_nt_base = 12

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "COMMA",
  "UWORD",
  "LWORD",
  "PWORD",
  "NICK",
  "AND",
  "APPELLATION",
  "TITLE",
  "SUFFIX",
  "UPWORD",
  "$start",
  "names",
  "name",
  "word",
  "display_order",
  "honorific",
  "sort_order",
  "titles",
  "u_words",
  "opt_suffices",
  "opt_titles",
  "last",
  "von",
  "first",
  "opt_words",
  "words",
  "opt_comma",
  "suffices",
  "u_word" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 11)
  def _reduce_1(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 12)
  def _reduce_2(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 13)
  def _reduce_3(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 15)
  def _reduce_4(val, _values, result)
     result = Name.new(:given => val[0])
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.y', 17)
  def _reduce_6(val, _values, result)
     result = val[0].merge(:family => val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 18)
  def _reduce_7(val, _values, result)
     result = val[1].merge(val[0])
    result
  end
.,.,

# reduce 8 omitted

module_eval(<<'.,.,', 'parser.y', 21)
  def _reduce_9(val, _values, result)
     result = Name.new(:appellation => val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 22)
  def _reduce_10(val, _values, result)
     result = Name.new(:title => val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_11(val, _values, result)
             result = Name.new(:given => val[0], :family => val[1],
           :suffix => val[2], :title => val[3])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 31)
  def _reduce_12(val, _values, result)
             result = Name.new(:given => val[0], :nick => val[1],
           :family => val[2], :suffix => val[3], :title => val[4])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_13(val, _values, result)
             result = Name.new(:given => val[0], :nick => val[1],
           :particle => val[2], :family => val[3],
           :suffix => val[4], :title => val[5])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_14(val, _values, result)
             result = Name.new(:given => val[0], :particle => val[1],
          :family => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 47)
  def _reduce_15(val, _values, result)
              result = Name.new(:given => val[0],
          :family => val[1,2].join(' '))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 52)
  def _reduce_16(val, _values, result)
             result = Name.new(:particle => val[0], :family => val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 57)
  def _reduce_17(val, _values, result)
             result = Name.new({ :family => val[0], :suffix => val[2][0],
           :given => val[2][1] }, !!val[2][0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 62)
  def _reduce_18(val, _values, result)
             result = Name.new({ :family => val[0,2].join(' '), :suffix => val[3][0],
           :given => val[3][1] }, !!val[3][0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 67)
  def _reduce_19(val, _values, result)
             result = Name.new({ :particle => val[0], :family => val[1],
           :suffix => val[3][0], :given => val[3][1] }, !!val[3][0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 72)
  def _reduce_20(val, _values, result)
             result = Name.new({ :particle => val[0,2].join(' '), :family => val[2],
           :suffix => val[4][0], :given => val[4][1] }, !!val[4][0])

    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'parser.y', 78)
  def _reduce_22(val, _values, result)
     result = val.join(' ')
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 79)
  def _reduce_23(val, _values, result)
     result = val.join(' ')
    result
  end
.,.,

# reduce 24 omitted

# reduce 25 omitted

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_26(val, _values, result)
     result = [nil,val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 84)
  def _reduce_27(val, _values, result)
     result = [val[2],val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 85)
  def _reduce_28(val, _values, result)
     result = [val[0],nil]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 86)
  def _reduce_29(val, _values, result)
     result = [val[0],val[2]]
    result
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'parser.y', 89)
  def _reduce_31(val, _values, result)
     result = val.join(' ')
    result
  end
.,.,

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'parser.y', 94)
  def _reduce_35(val, _values, result)
     result = val.join(' ')
    result
  end
.,.,

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

module_eval(<<'.,.,', 'parser.y', 104)
  def _reduce_46(val, _values, result)
     result = val.join(' ')
    result
  end
.,.,

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'parser.y', 109)
  def _reduce_50(val, _values, result)
     result = val.join(' ')
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module Namae
